python
import subprocess as sp
import os

NULLPROG = "sh -c 'while [ 1 = 1 ]; do sleep 100; done'"

def tmux(*args):
    return sp.check_output(['tmux'] + list(args)).decode('utf8')

def set_title(tty, title):
    with open(tty, 'ab') as t:
        t.write(b'\x1b]2;' + title.encode('utf8') + b'\x1b\\')

tmux('setw', 'remain-on-exit', 'on')
gdb_pane, gdb_tty = tmux('display-message', '-p' , '-F', '#{pane_id},#{pane_tty}').strip().split(',')
set_title(gdb_tty, 'gdb')

dashboard_pane, dashboard_tty = tmux('split-window', '-d', '-h', '-P', '-F', '#{pane_id},#{pane_tty}', NULLPROG).strip().split(',')
sp.check_call(['stty', '--file', dashboard_tty, '-echo'])
set_title(dashboard_tty, 'dashboard')
gdb.execute(f'dashboard -output {dashboard_tty}')

app_pane, app_tty = tmux('split-window', '-d', '-v', '-P', '-F', '#{pane_id},#{pane_tty}', NULLPROG).strip().split(',')
set_title(app_tty, 'inferior')
gdb.execute(f'set inferior-tty {app_tty}')

end

dashboard -layout source assembly registers stack
dashboard -enabled on
dashboard -style syntax_highlighting 'monokai'

# make sure dashboard output is updated when gdb state changes
define hookpost-up
dashboard
end
define hookpost-down
dashboard
end
define hookpost-thread
dashboard
end
define hookpost-delete
dashboard
end
define hookpost-clear
dashboard
end
define hookpost-break
dashboard
end

# vim: set ft=python:
